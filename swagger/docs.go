// Package swagger GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package swagger

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/sample-module": {
            "get": {
                "description": "List.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sampleModule"
                ],
                "summary": "List.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerListSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorInvalidMethod"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorUnAuthorize"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorNotFound"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorMethodNotAllowed"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorConflict"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerOtherInternalServerError"
                        }
                    }
                }
            }
        },
        "/permission/list": {
            "get": {
                "description": "List.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permission"
                ],
                "summary": "List.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorInvalidMethod"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorUnAuthorize"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorNotFound"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorMethodNotAllowed"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorConflict"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerOtherInternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Paginator": {
            "type": "object",
            "properties": {
                "back_page": {
                    "type": "integer"
                },
                "current_page": {
                    "type": "integer"
                },
                "limit_per_page": {
                    "type": "integer"
                },
                "next_page": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_records": {
                    "type": "integer"
                }
            }
        },
        "models.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "errors": {},
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "status_desc": {
                    "type": "string"
                }
            }
        },
        "models.SampleModuleDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "test": {
                    "type": "string"
                }
            }
        },
        "models.SampleModulePaginationDto": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SampleModuleDto"
                    }
                },
                "paginator": {
                    "$ref": "#/definitions/models.Paginator"
                }
            }
        },
        "models.SwaggerErrorBadParamInput": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "errors": {
                    "type": "string",
                    "example": "\u003cError-Message-For-System\u003e"
                },
                "message": {
                    "type": "string",
                    "example": "\u003cError-Message-For-Client-User\u003e"
                },
                "status_code": {
                    "type": "integer",
                    "example": 400
                },
                "status_desc": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "models.SwaggerErrorConflict": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "errors": {
                    "type": "string",
                    "example": "\u003cError-Message-For-System\u003e"
                },
                "message": {
                    "type": "string",
                    "example": "\u003cError-Message-For-Client-User\u003e"
                },
                "status_code": {
                    "type": "integer",
                    "example": 409
                },
                "status_desc": {
                    "type": "string",
                    "example": "Conflict"
                }
            }
        },
        "models.SwaggerErrorInvalidMethod": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "errors": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid Method"
                },
                "status_code": {
                    "type": "integer",
                    "example": 400
                },
                "status_desc": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "models.SwaggerErrorMethodNotAllowed": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "errors": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "Method Not Allowed"
                },
                "status_code": {
                    "type": "integer",
                    "example": 405
                },
                "status_desc": {
                    "type": "string",
                    "example": "Method Not Allowed"
                }
            }
        },
        "models.SwaggerErrorNotFound": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "errors": {
                    "type": "string",
                    "example": "\u003cError-Message-For-System\u003e"
                },
                "message": {
                    "type": "string",
                    "example": "\u003cError-Message-For-Client-User\u003e"
                },
                "status_code": {
                    "type": "integer",
                    "example": 404
                },
                "status_desc": {
                    "type": "string",
                    "example": "Not Found"
                }
            }
        },
        "models.SwaggerErrorUnAuthorize": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "errors": {
                    "type": "string",
                    "example": "\u003cError-Message-For-System\u003e"
                },
                "message": {
                    "type": "string",
                    "example": "\u003cError-Message-For-Client-User\u003e"
                },
                "status_code": {
                    "type": "integer",
                    "example": 401
                },
                "status_desc": {
                    "type": "string",
                    "example": "Unauthorized"
                }
            }
        },
        "models.SwaggerListSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.SampleModulePaginationDto"
                },
                "errors": {
                    "type": "string",
                    "example": "null"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                },
                "status_desc": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "models.SwaggerOtherInternalServerError": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "errors": {
                    "type": "string",
                    "example": "\u003cError-Message-For-System\u003e"
                },
                "message": {
                    "type": "string",
                    "example": "\u003cError-Message-For-Client-User\u003e"
                },
                "status_code": {
                    "type": "integer",
                    "example": 500
                },
                "status_desc": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{"http"},
	Title:       "Echo Swagger clean-architecture-beego API",
	Description: "This is a sample server server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
